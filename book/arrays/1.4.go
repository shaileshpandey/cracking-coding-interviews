package arrays

import (
	"fmt"
)

func palindromePermutation_dict(input string) bool {
	dict := map[rune]int{}
	for _, value := range input {
		dict[value] = dict[value] + 1
	}

	var count int = 0
	for _, value := range dict {
		count = count + value%2
	}

	return count <= 1
}

func palindromePermutation_array(input string) bool {
	arr := [128]int{}
	for _, value := range input {
		arr[value] = arr[value] + 1
	}

	var count int = 0
	for _, value := range arr {
		count = count + value%2
	}

	return count <= 1
}

func Call1_4() {
	dict := map[string]bool{
		"esbxyxkexzudempuqiohguwawkbfoyngvbvqxpdjrdfzfbrimnxpwzxkeofmvbwjnvgkyksomousoybkynahgjvhimwozlksnqwjbsioyrlejhlepxdhjvefnnddfaernteromeidkdwlbvhwjfyavmgdegcxmdnnpnhjavjkgiccenhyyqhxciqxnmocupwkknalfszxaqtmqepnvktfgpmgmdyejhatuqxohlyantyuurneymxfcoparuqudvutgnedwfgpsgupxrookcbwdordlzqviuyquqqnwldsfkhchodhicvyqshupobsrxienzskndtrlrrambguqqhkuzzusxmsjrcvlknvuhvkcrifypmkmyddsjbjbaarkiqxhkegqoixdnzqeqzobjhqtoihpfozijtuhtvusddyqaqkncgawsecnmmkyhkboxyyvujaohaimquilmvyuzuqderyykzlahpndzarojcldmvgwjdyoznzmjmbzmqwqcbrvhtiwnjeyfpaeekefmdmvvbwtcwmltgxuorjlypyxezfqfwwakhbbocmancdycprrjjkeviqngcbmsaovbuzduxxrzlvxtvesgeuswnkstrmxmcujlzctorpakexsnmkivnkeyxwlusypbdotyjiigryjupffhpxdjyvmefcogtsgbeoynxvnkvaqxpetvgoxtnbshapqwudwbzrxzjayeztpudfpddlvuhkevhjbgcamphjlswqhtzkwiqqxgspddflicbeokvmfhnooxgkqgxocfcdjtgafwozjxtdsscqoczeqkitplwuokaczelkezfqoqzulpevgjnsdtizdfayzsyujxkmyotppjdhepnoqaigfqljqioktxqkucxrawsltigfhdfuyxjzdlsmvatmcpysncqgtvasywagaglfujynkzoipmwtresankdnypsqmsynsirbkwzociiwubhgeayefyplmzvqscp": false,
		"cdbkxqnqtsqtqcuskbhwhcxjguhunaqytfgzfpxmimxpnubdrhnopplimtgascleyvpegdacvnpsnaaphktvoqodsnpjxmmdryjitrpveyqbjynhhgekukhbzknprpmxrhzxvgyucenmurehmkjyhtrhpuvloingdcsgvngfeanubjcctupmmtikihwxdmfedzlqnjeujfqfphjuwqgnygnkzvhvhppelztlwmvuisfcnbjudqdmxaaoydggaowltyrmlntecmkfpdencllzgvbmfnndsfmuhvgzqamiggxpcvltwijtodzyuuntzczfzgjrwpbqqxccgyajvtjfapkllgrsibyhlysjagbkigwkvlllvkohfisxrkilhblwybqrbdhadxowhedqcmuqldaehtrzywnhvzuurvcumqnbtkygcpvfxkseahownqdhoblktpyvmuvvajieuakfhurmdvivxzcabvnczinlkwizwsuuugyhlrcecjxorieikhwuxvuyvoktgxtsovnphkmhaalmdjtlpmsizogkeaypvwuxfewbuxpgjjcuzpkmitbbbzjbwjhjybzandgxynjfkihvjnjnigakjyaavgvtutuvoqamiiexmmkqvfjtkifvnziprmubtwwozpktbjqfiygwhssefppplgblrtvlsrihkawfcuvkbyzxmqeihoualjizvfrhscsbabdnwqsnuzettueqlweeacpgywdhvefoggdpwnzselbbihqlbdljknbniwgiclxburspmbuvxxzhwoivsbizjztywmvarqdysgpfqhmmenjcqznoigunpdvzhhmkfqxfsngbcpdppgvihelawdftqtaynhoidkugjfwfeunonihhtjuohwhxnwzihnwloxzehprqsmymwamaxvtqtwhihireyrtleijeaprcwydecqkmkfkdnqgevtiucfbjldjfltfhrkfkvrnktuuzqvjqmjlu": false,
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa":  true,
		"imftpyltwwqzlnsagkawfmtepoqirqnmzhhhysmlyrqglxdjvxzwxrzjnbxqdycwaagjwwajvayvaowuksdweimbmfxywxwyuylzbzautuijzyjibfguhbihwurwqfvysbosamdwmunhubdnqncmxqpgyvkzbnoaswcsuvryanamcyyigpfjafhnrzgygyevyjyilpznoamjiqmnuxvwzkkwoijwfxuasipsetrmqwbnjycqhwyprpccyolivrfloofoaebulcwkmyeftrogqqftyuxnoygkaqharwuieugfmkzvxdluwwgxsudgmplnwpyecbbwkizwmyuhhmwdmrtriymhhwtqdqgvenonguqftusrdoqkaujwnzhtkzmqlfmzqwutchmlnjtmfisvimzzjimpllviogofyuxwcpgxfolwmigyqmxqkwjowpmkiajcocmiodeokjbttmqjryjjiagaevbjndbznqekjqlgreruqdveckrmilxzqvntwxonocofyarezvayucncszrtdphzhdhyryafolcakjnmfolmooiayvzqbfvpzbvfsofxocabqqzqvtlqjyuqiczatiluzhdmiqefffliiuuzrjwkpfshsfnomcyywgrkqstdqbzwdrjlscdrgrebralmiotarewakarvrvivcuqhztqzgmdkiuzdmvzynmusdfkpzhwbhdrmxkqwbujeyercvrrcaktxeolfeidfcbchicaqnvfspuebymahuncsewhhzicguqpwyurxzciernjiigkfgiysoqedbipquiyyqzqmakslcppdrzixeukvqsqosukcakmsckuqtrcraglqtjaqgyqbqduecqptzszkzepnsrhmduxolfiyvywwzvxkkdkfzkqbirpaiffdbxhwwaygnzhltskqlllchlhkmeyoadawzojudeovcdpzwghnmdqeeizrdoepxqwtrvyhudqfmkyuwsprifmm": true,
		"abab": true,
	}

	noissue := true
	for key, value := range dict {
		if palindromePermutation_dict(key) != value {
			fmt.Printf("palindromePermutation_dict not returning result for %s", key)
			noissue = false
		}

		if palindromePermutation_array(key) != value {
			fmt.Printf("palindromePermutation_array not returning result for %s", key)
			noissue = false
		}
	}

	if noissue {
		fmt.Println("No issues found in 1.4")
	}
}
